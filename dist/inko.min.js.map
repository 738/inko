{"version":3,"sources":["inko.min.js"],"names":["pjson","require","영어","한글","초성","중성","종성","가","Inko","this","prototype","VERSION","version","en2ko","input","result","undefined","_초성","_중성","_종성","i","length","char","index","indexOf","_한글","한글생성","새초성","ko2en","_분리","_코드","charCodeAt","한글분리","j","초","중","종","String","fromCharCode","코드","Math","floor","중1","중2","종1","종2","is한글","Error","test","exports","module","define","amd","importScripts","inko","self","window","document"],"mappings":"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","file":"inko.min.js","sourcesContent":["//  Inko.js 1.0.0\n//  (c) 2018 Jon Jee\n//  Inko may be freely distributed or modified under the MIT license.\nvar pjson = require('./package.json');\n\n(function () {\n    // constants\n    const 영어 = \"rRseEfaqQtTdwWczxvgASDFGZXCVkoiOjpuPhynbmlYUIHJKLBNM\";                         // 33 + 19개\n    const 한글 = \"ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅁㄴㅇㄹㅎㅋㅌㅊㅍㅏㅐㅑㅒㅓㅔㅕㅖㅗㅛㅜㅠㅡㅣㅛㅕㅑㅗㅓㅏㅣㅠㅜㅡ\";      // 33 + 19개\n    const 초성 = \"ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ\";                          // 19개\n    const 중성 = \"ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ\";                       // 21개\n    const 종성 = \"ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ\";              // 27개\n    const 첫모음 = 28;\n    const 가 = 44032;\n    const 힣 = 55203;\n    const ㄱ = 12593;\n    const ㅣ = 12643;\n\n    // constructor\n    function Inko() {\n        return this;\n    }\n\n    Inko.prototype.VERSION = pjson.version;\n\n    Inko.prototype.en2ko = function (input) {\n        let result = '';\n        if (input === '' || input === undefined) return result;\n        let _초성 = -1, _중성 = -1, _종성 = -1;\n\n        for (let i = 0; i < input.length; i++) {\n            let char = input[i];\n            let index = 영어.indexOf(char);\n            let _한글 = 한글[index];\n            // 한글이 아니라면\n            if (index === -1) {\n                // 남아있는 한글 처리\n                if (_초성 !== -1) {\n                    if (_중성 !== -1) result += this.한글생성(_초성, _중성, _종성);     // 초성 + 중성 + (종성)\n                    else result += 초성[_초성];      // 초성만\n                } else {\n                    if (_중성 !== -1) result += 중성[_중성];    // 중성만\n                    else if (_종성 !== -1) result += 종성[_종성];    // 종성만 (복자음)\n                }\n                _초성 = -1, _중성 = -1, _종성 = -1;\n                result += char;\n            }\n            // 자음이라면\n            else if (index < 첫모음) {\n                if (_중성 !== -1) {\n                    // 중성만 입력됨\n                    if (_초성 === -1) {\n                        result += 중성[_중성];\n                        _중성 = -1;\n                        _초성 = 초성.indexOf(_한글);\n                    }\n                    // 초성 + 중성 입력됨\n                    else {\n                        // 종성 입력중\n                        if (_종성 === -1) {\n                            _종성 = 종성.indexOf(_한글);\n                            // ㄸ,ㅃ,ㅉ와 같이 종성에 못오는 자음들의 경우 초성으로 처리해야함\n                            if (_종성 === -1) {\n                                result += this.한글생성(_초성, _중성, _종성);\n                                _초성 = 초성.indexOf(_한글);\n                                _중성 = -1;\n                            }\n                        }\n                        // 복자음 처리\n                        else if (_종성 === 종성.indexOf('ㄱ') && _한글 === 'ㅅ') _종성 = 종성.indexOf('ㄳ');   // 복자음 ㄳ\n                        else if (_종성 === 종성.indexOf('ㄴ') && _한글 === 'ㅈ') _종성 = 종성.indexOf('ㄵ');   // 복자음 ㄵ\n                        else if (_종성 === 종성.indexOf('ㄴ') && _한글 === 'ㅎ') _종성 = 종성.indexOf('ㄶ');   // 복자음 ㄶ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㄱ') _종성 = 종성.indexOf('ㄺ');   // 복자음 ㄺ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅁ') _종성 = 종성.indexOf('ㄻ');   // 복자음 ㄻ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅂ') _종성 = 종성.indexOf('ㄼ');   // 복자음 ㄼ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅅ') _종성 = 종성.indexOf('ㄽ');   // 복자음 ㄽ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅌ') _종성 = 종성.indexOf('ㄾ');   // 복자음 ㄾ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅍ') _종성 = 종성.indexOf('ㄿ');   // 복자음 ㄿ\n                        else if (_종성 === 종성.indexOf('ㄹ') && _한글 === 'ㅎ') _종성 = 종성.indexOf('ㅀ');   // 복자음 ㅀ\n                        else if (_종성 === 종성.indexOf('ㅂ') && _한글 === 'ㅅ') _종성 = 종성.indexOf('ㅄ');   // 복자음 ㅄ\n                        // 복자음이 아니므로 초성으로 처리\n                        else {\n                            result += this.한글생성(_초성, _중성, _종성);\n                            _중성 = -1, _종성 = -1;\n                            _초성 = 초성.indexOf(_한글);\n                        }\n                    }\n                }\n                // 중성이 없음\n                else {\n                    // 초성이 없음\n                    if (_초성 === -1) _초성 = 초성.indexOf(_한글);\n                    // 초성이 있는데 또 자음이 들어옴\n                    else {\n                        result += 초성[_초성];\n                        _초성 = 초성.indexOf(_한글);\n                    }\n                }\n            }\n            // 모음이라면\n            else {\n                if (_종성 !== -1) {\t\t\t\t\t\t// (앞글자 종성), 초성+중성\n                    // 복자음 다시 분해\n                    var 새초성;\t\t\t                               // 임시 초성\n                    if (_종성 === 종성.indexOf('ㄳ')) {\t\t\t\t\t// ㄱ / ㅅ\n                        _종성 = 종성.indexOf('ㄱ');\n                        새초성 = 초성.indexOf('ㅅ');\n                    } else if (_종성 === 종성.indexOf('ㄵ')) {\t\t\t// ㄴ / ㅈ\n                        _종성 = 종성.indexOf('ㄴ');\n                        새초성 = 초성.indexOf('ㅈ');\n                    } else if (_종성 === 종성.indexOf('ㄶ')) {\t\t\t// ㄴ / ㅎ\n                        _종성 = 종성.indexOf('ㄴ');\n                        새초성 = 초성.indexOf('ㅎ');\n                    } else if (_종성 === 종성.indexOf('ㄺ')) {\t\t\t// ㄹ / ㄱ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㄱ');\n                    } else if (_종성 === 종성.indexOf('ㄻ')) {\t\t\t// ㄹ / ㅁ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅁ');\n                    } else if (_종성 === 종성.indexOf('ㄼ')) {\t\t\t// ㄹ / ㅂ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅂ');\n                    } else if (_종성 === 종성.indexOf('ㄽ')) {\t\t\t// ㄹ / ㅅ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅅ');\n                    } else if (_종성 === 종성.indexOf('ㄾ')) {\t\t\t// ㄹ / ㅌ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅌ');\n                    } else if (_종성 === 종성.indexOf('ㄿ')) {\t\t\t// ㄹ / ㅍ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅍ');\n                    } else if (_종성 === 종성.indexOf('ㅀ')) {\t\t\t// ㄹ / ㅎ\n                        _종성 = 종성.indexOf('ㄹ');\n                        새초성 = 초성.indexOf('ㅎ');\n                    } else if (_종성 === 종성.indexOf('ㅄ')) {\t\t\t// ㅂ / ㅅ\n                        _종성 = 종성.indexOf('ㅂ');\n                        새초성 = 초성.indexOf('ㅅ');\n                    }\n                    // 복자음 아님 \n                    else {\n                        새초성 = 초성.indexOf(종성[_종성]);\n                        _종성 = -1;\n                    }\n                    // 앞글자가 초성 + 중성 + (종성)\n                    if (_초성 != -1) result += this.한글생성(_초성, _중성, _종성);\n                    // 복자음만 있음\n                    else result += 종성[_종성];\n                    _초성 = 새초성;\n                    _중성 = -1;\n                    _종성 = -1;\n                }\n                if (_중성 === -1) _중성 = 중성.indexOf(_한글);\n                else if (_중성 === 중성.indexOf('ㅗ') && _한글 === 'ㅏ') _중성 = 중성.indexOf('ㅘ');\n                else if (_중성 === 중성.indexOf('ㅗ') && _한글 === 'ㅐ') _중성 = 중성.indexOf('ㅙ');\n                else if (_중성 === 중성.indexOf('ㅗ') && _한글 === 'ㅣ') _중성 = 중성.indexOf('ㅚ');\n                else if (_중성 === 중성.indexOf('ㅜ') && _한글 === 'ㅓ') _중성 = 중성.indexOf('ㅝ');\n                else if (_중성 === 중성.indexOf('ㅜ') && _한글 === 'ㅔ') _중성 = 중성.indexOf('ㅞ');\n                else if (_중성 === 중성.indexOf('ㅜ') && _한글 === 'ㅣ') _중성 = 중성.indexOf('ㅟ');\n                else if (_중성 === 중성.indexOf('ㅡ') && _한글 === 'ㅣ') _중성 = 중성.indexOf('ㅢ');\n                // 조합 안되는 모음\n                else {\n                    // 초성 + 중성 후 중성\n                    if (_초성 != -1) {\n                        result += this.한글생성(_초성, _중성, _종성);\n                        _초성 = -1;\n                    }\n                    // 중성 후 중성\n                    else result += 중성[_중성];\n                    _중성 = -1;\n                    result += _한글;\n                }\n            }\n        }\n        // 남아있는 한글 처리\n        if (_초성 !== -1) {\n            // 초성 + 중성 + (종성)\n            if (_중성 !== -1) result += this.한글생성(_초성, _중성, _종성);\n            // 초성만\n            else result += 초성[_초성]\n        } else {\n            // 중성만\n            if (_중성 !== -1) result += 중성[_중성]\n            // 종성만 (복자음)\n            else if (_종성 !== -1) result += 종성[_종성]\n        }\n        return result;\n    }\n\n    Inko.prototype.ko2en = function (input) {\n        let result = '';\n        if (input === '' || input === undefined) return result;\n        let _분리 = [-1, -1, -1, -1, -1];\n\n        for (let i = 0; i < input.length; i++) {\n            let _한글 = input[i];\n            let _코드 = _한글.charCodeAt();\n            // 가 ~ 힣 사이에 있는 한글이라면\n            if ((_코드 >= 가 && _코드 <= 힣) || (_코드 >= ㄱ && _코드 <= ㅣ)) {\n                _분리 = this.한글분리(_한글);\n            }\n            // 한글이 아니라면\n            else {\n                result += _한글;\n                // 분리 배열 초기화\n                _분리 = [-1, -1, -1, -1, -1];\n            }\n\n            for (let j = 0; j < _분리.length; j++) {\n                if (_분리[j] !== -1)\n                    result += 영어[_분리[j]];\n            }\n        }\n        return result;\n    }\n\n    // 초성, 중성, 종성의 charCode를 받아서 합친 한글의 charCode를 반환함\n    Inko.prototype.한글생성 = function (초, 중, 종) {\n        return String.fromCharCode(44032 + 초 * 588 + 중 * 28 + 종 + 1);\n    }\n\n    // 한글 입력값으로 받아서 초성, 중성, 종성 분리해줌\n    Inko.prototype.한글분리 = function (_한글) {\n        let 코드 = _한글.charCodeAt();\n\n        if (코드 >= 가 && 코드 <= 힣) {\n            let 초 = Math.floor((코드 - 가) / 588);\n            let 중 = Math.floor((코드 - 가 - 초 * 588) / 28);\n            let 종 = 코드 - 가 - 초 * 588 - 중 * 28 - 1;\n            let 중1 = 중, 중2 = -1, 종1 = 종, 종2 = -1;\n\n            if (중 == 중성.indexOf(\"ㅘ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅏ\");\n            else if (중 == 중성.indexOf(\"ㅙ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅐ\");\n            else if (중 == 중성.indexOf(\"ㅚ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅣ\");\n            else if (중 == 중성.indexOf(\"ㅝ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅓ\");\n            else if (중 == 중성.indexOf(\"ㅞ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅔ\");\n            else if (중 == 중성.indexOf(\"ㅟ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅣ\");\n            else if (중 == 중성.indexOf(\"ㅢ\")) 중1 = 한글.indexOf(\"ㅡ\"), 중2 = 한글.indexOf(\"ㅣ\");\n\n            if (종 == 종성.indexOf(\"ㄳ\")) 종1 = 한글.indexOf(\"ㄱ\"), 종2 = 한글.indexOf(\"ㅅ\");\n            else if (종 == 종성.indexOf(\"ㄵ\")) 종1 = 한글.indexOf(\"ㄴ\"), 종2 = 한글.indexOf(\"ㅈ\");\n            else if (종 == 종성.indexOf(\"ㄶ\")) 종1 = 한글.indexOf(\"ㄴ\"), 종2 = 한글.indexOf(\"ㅎ\");\n            else if (종 == 종성.indexOf(\"ㄺ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㄱ\");\n            else if (종 == 종성.indexOf(\"ㄻ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅁ\");\n            else if (종 == 종성.indexOf(\"ㄼ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅂ\");\n            else if (종 == 종성.indexOf(\"ㄽ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅅ\");\n            else if (종 == 종성.indexOf(\"ㄾ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅌ\");\n            else if (종 == 종성.indexOf(\"ㄿ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅍ\");\n            else if (종 == 종성.indexOf(\"ㅀ\")) 종1 = 한글.indexOf(\"ㄹ\"), 종2 = 한글.indexOf(\"ㅎ\");\n            else if (종 == 종성.indexOf(\"ㅄ\")) 종1 = 한글.indexOf(\"ㅂ\"), 종2 = 한글.indexOf(\"ㅅ\");\n\n            // 복모음이 아니라면\n            if (중2 === -1) 중1 = 한글.indexOf(중성[중]);\n\n            // 복자음이 아니라면\n            if (종2 === -1) 종1 = 한글.indexOf(종성[종]);\n\n            return [초, 중1, 중2, 종1, 종2];\n        } else if (코드 >= ㄱ && 코드 <= ㅣ) {\n            if (초성.indexOf(_한글) > -1) {\n                let 초 = 한글.indexOf(_한글);\n                return [초, -1, -1, -1, -1];\n            } else if (중성.indexOf(_한글) > -1) {\n                let 중 = 중성.indexOf(_한글);\n                let 중1 = 중, 중2 = -1;\n                if (중 == 중성.indexOf(\"ㅘ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅏ\");\n                else if (중 == 중성.indexOf(\"ㅙ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅐ\");\n                else if (중 == 중성.indexOf(\"ㅚ\")) 중1 = 한글.indexOf(\"ㅗ\"), 중2 = 한글.indexOf(\"ㅣ\");\n                else if (중 == 중성.indexOf(\"ㅝ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅓ\");\n                else if (중 == 중성.indexOf(\"ㅞ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅔ\");\n                else if (중 == 중성.indexOf(\"ㅟ\")) 중1 = 한글.indexOf(\"ㅜ\"), 중2 = 한글.indexOf(\"ㅣ\");\n                else if (중 == 중성.indexOf(\"ㅢ\")) 중1 = 한글.indexOf(\"ㅡ\"), 중2 = 한글.indexOf(\"ㅣ\");\n\n                // 복모음이 아니라면\n                if (중2 === -1) 중1 = 한글.indexOf(중성[중]);\n\n                return [-1, 중1, 중2, -1, -1];\n            }\n        }\n        return [-1, -1, -1, -1, -1];\n    }\n\n    Inko.prototype.is한글 = function (char) {\n        if (char.length > 1) throw new Error(\"한글자가 아닙니다.\");\n        return /[ㄱ-ㅎ|ㅏ-ㅣ|기-힣]/.test(char);\n    }\n\n    // CommonJS module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = Inko;\n        }\n        exports.Inko = Inko;\n    }\n\n    // Register as an anonymous AMD module\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return Inko;\n        });\n    }\n\n    // if there is a importsScrips object define chance for worker\n    // allows worker to use full Chance functionality with seed\n    if (typeof importScripts !== 'undefined') {\n        inko = new Inko();\n        self.Inko = Inko;\n    }\n\n    // If there is a window object, that at least has a document property,\n    // instantiate and define chance on the window\n    if (typeof window === \"object\" && typeof window.document === \"object\") {\n        window.Inko = Inko;\n        window.inko = new Inko();\n    }\n})();\n"]}